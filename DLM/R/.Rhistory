install.packages("dlm")
library(dlm)
?dlm
# install.packages("dlm")
library(dlm)
dlm(FF = 1, V = 0.8, GG = 1, W = 0.1, m0 = 0, C0 = 100)
dlmModPoly(order = 1, dV = 0.8, dW = 0.1, C0 = 100)
# install.packages("dlm")
library(dlm)
## FF GG 为关系矩阵，V，W为 the observation and evolution variances
dlm(FF = 1, V = 0.8, GG = 1, W = 0.1, m0 = 0, C0 = 100)
dlmModPoly(order = 1, dV = 0.8, dW = 0.1, C0 = 100)
## FF GG 为关系矩阵，V，W为 the observation and evolution variances
dlm(FF = 1, V = 0.8, GG = 1, W = 0.1, m0 = 0, C0 = 100)
dlmModPoly(order = 1, dV = 0.8, dW = 0.1, C0 = 100)
myMod <- dlmModPoly()
FF(myMod)
W(myMod)
m0(myMod)
V(myMod) <- 0.8
myMod <- dlmModPoly() + dlmModSeas(4)
"foo" %+% "bar"
dlmModPoly(dV = 0.2, dW = c(0, 0.5)) %+%  (dlmModSeas(4, dV = 0, dW = c(0, 0, 0.35)) + dlmModPoly(1, dV = 0.1, dW = 0.03))
myMod <- dlmModReg(u, dV = 14.5)
u <- rnorm(25)
myMod <- dlmModReg(u, dV = 14.5)
myMod$JFF
head(myMod$X)
buildFun <- function(x) {
dlmModPoly(1, dV = exp(x[1]), dW = exp(x[2]))
}
fit <- dlmMLE(Nile, parm = c(0,0), build = buildFun)
fit$conv
dlmNile <- buildFun(fit$par)
W(dlmNile)
StructTS(Nile, "level")
buildFun <- function(x) {
m <- dlmModPoly(1, dV = exp(x[1]))
m$JW <- matrix(1)
m$X <- matrix(exp(x[2]), nc = 1, nr = length(Nile))
j <- which(time(Nile) == 1899)
m$X[j,1] <- m$X[j,1] * (1 + exp(x[3]))
return(m)
}
fit <- dlmMLE(Nile, parm = c(0,0,0), build = buildFun)
fit$conv
dlmNileJump <- buildFun(fit$par)
V(dlmNileJump)
dlmNileJump$X[c(1, which(time(Nile) == 1899)), 1]
# 3 Filtering, smoothing and forecasting
nileJumpFilt <- dlmFilter(Nile, dlmNileJump)
plot(Nile, type = 'o', col = "seagreen")
lines(dropFirst(nileJumpFilt$m), type = 'o', pch = 20, col = "brown")
attach(nileJumpFilt)
v <- unlist(dlmSvd2var(U.C, D.C))
pl <- dropFirst(m) + qnorm(0.05, sd = sqrt(v[-1]))
pu <- dropFirst(m) + qnorm(0.95, sd = sqrt(v[-1]))
detach()
lines(pl, lty = 2, col = "brown")
lines(pu, lty = 2, col = "brown")
nileJumpSmooth <- dlmSmooth(nileJumpFilt)
plot(Nile, type = 'o', col = "seagreen")
attach(nileJumpSmooth)
lines(dropFirst(s), type = 'o', pch = 20, col = "brown")
v <- unlist(dlmSvd2var(U.S, D.S))
pl <- dropFirst(s) + qnorm(0.05, sd = sqrt(v[-1]))
pu <- dropFirst(s) + qnorm(0.95, sd = sqrt(v[-1]))
detach()
lines(pl, lty = 2, col = "brown")
lines(pu, lty = 2, col = "brown")
lGas <- log(UKgas)
dlmGas <- dlmModPoly() + dlmModSeas(4)
buildFun <- function(x) {
diag(W(dlmGas))[2:3] <- exp(x[1:2])
V(dlmGas) <- exp(x[3])
return(dlmGas)
}
(fit <- dlmMLE(lGas, parm = rep(0, 3), build = buildFun))$conv
dlmGas <- buildFun(fit$par)
drop(V(dlmGas))
diag(W(dlmGas))[2:3]
gasSmooth <- dlmSmooth(lGas, mod = dlmGas)
x <- cbind(lGas, dropFirst(gasSmooth$s[,c(1,3)]))
colnames(x) <- c("Gas", "Trend", "Seasonal")
plot(x, type = 'o', main = "UK Gas Consumption")
# 3.3 Forecasting
gasFilt <- dlmFilter(lGas, mod = dlmGas)
gasFore <- dlmForecast(gasFilt, nAhead = 20)
sqrtR <- sapply(gasFore$R, function(x) sqrt(x[1,1]))
pl <- gasFore$a[,1] + qnorm(0.05, sd = sqrtR)
pu <- gasFore$a[,1] + qnorm(0.95, sd = sqrtR)
x <- ts.union(window(lGas, start = c(1982, 1)),
+               window(gasSmooth$s[,1], start = c(1982, 1)),
+               gasFore$a[,1], pl, pu)
plot(x, plot.type = "single", type = 'o', pch = c(1, 0, 20, 3, 3),
+      col = c("darkgrey", "darkgrey", "brown", "yellow", "yellow"),
plot(x, plot.type = "single", type = 'o', pch = c(1, 0, 20, 3, 3),
col = c("darkgrey", "darkgrey", "brown", "yellow", "yellow"),
ylab = "Log gas consumption")
legend("bottomright", legend = c("Observed","Smoothed (deseasonalized)",
"Forecasted level", "90% probability limit"),
bty = 'n', pch = c(1, 0, 20, 3, 3), lty = 1,
col = c("darkgrey", "darkgrey", "brown", "yellow", "yellow"))
plot(Nile, type = 'o', col = "seagreen")
nileFilt <- dlmFilter(Nile, dlmNile)
lines(dropFirst(dlmBSample(nileFilt)), col = "brown")
for (i in 1:10) {# 10 simulated "true" levels
lines(dropFirst(dlmBSample(nileFilt)), col = "brown")
}
lmixnorm <- function(x, weights, means, sds) {
log(crossprod(weights, exp(-0.5 * ((x - means) / sds)^2 + - log(sds))))
}
y <- arms(0, myldens = lmixnorm,
indFunc = function(x,...) (x > (-100)) * (x < 100),
n = 5000, weights = c(1, 3, 2),
means = c(-10, 0, 10), sds = c(7, 5, 2))
summary(y)
curve(colSums(c(1, 3, 2) / 6 *
dnorm(matrix(x, 3, length(x), TRUE),
mean = c(-10, 0, 10), sd = c(7, 5, 2))),add = TRUE)
legend(-25, 0.07, "True density", lty = 1, bty = 'n')
library(MASS)
truehist(y, prob = TRUE, ylim = c(0, 0.08), bty = 'o')
curve(colSums(c(1, 3, 2) / 6 * dnorm(matrix(x, 3, length(x), TRUE),
mean = c(-10, 0, 10), sd = c(7, 5, 2))),add = TRUE)
legend(-25, 0.07, "True density", lty = 1, bty = 'n')
# 加载所需的包
library(dlm)
library(ggplot2)
# 创建一个示例数据集
set.seed(123)
n <- 100
t <- 1:n
trend <- 0.5 * t
seasonality <- sin(2 * pi * t / 12) + cos(2 * pi * t / 12)
error <- rnorm(n, sd = 0.5)
y <- trend + seasonality + error
# 创建状态空间模型
buildModel <- function(data) {
dlmModPoly(order = 2, dV = 0.1^2) + dlmModTrig(period = 12)
}
# 拟合模型
fit <- dlmMLE(y, parm = rep(0, 4), build = buildModel)
？dlmMLE
?dlmMLE
# 创建状态空间模型
buildModel <- function(data) {
dlmModPoly(order = 2, dV = 0.1^2) + dlmModTrig(period = 12)
}
# 拟合模型
fit <- dlmMLE(y, parm = rep(0, 4), build = buildModel)
?dlmModTrig
# 创建状态空间模型
buildModel <- function(data) {
dlmModPoly(order = 2, dV = 0.1^2) + dlmModTrig(tau = 6.3, q = 2)
}
# 拟合模型
fit <- dlmMLE(y, parm = rep(0, 4), build = buildModel)
# 提取组件
trend_comp <- dlmFilter(y, buildModel()$FF)
# 创建状态空间模型
buildModel <- function(data) {
dlmModPoly(order = 2, dV = 0.1^2) + dlmModTrig(period = 12)
}
# 拟合模型
fit <- dlmMLE(y, parm = rep(0, 4), build = buildModel)
# 创建状态空间模型
# 创建状态空间模型
buildModel <- function(data) {
# 创建一个包含趋势项和周期项的模型
trend_model <- dlmModPoly(order = 2, dV = 0.1^2)
seasonal_model <- dlmModTrig(n = 12, type = "sin", dW = 0.1^2)
model <- trend_model + seasonal_model
return(model)
}
# 拟合模型
fit <- dlmMLE(y, parm = rep(0, 5), build = buildModel)
# 创建状态空间模型
buildModel <- function(data) {
dlmModPoly(order = 2, dV = 0.1^2) + dlmModTrig(s = 12)
}
# 拟合模型
fit <- dlmMLE(y, parm = rep(0, 4), build = buildModel)
# 提取组件
trend_comp <- dlmFilter(y, buildModel()$FF)
?dlmFilter
# 提取组件
trend_comp <- dlmFilter(y, fit$FF)
seasonality_comp <- dlmFilter(y, fit$GG)
fit$FF
fit
# 绘制原始数据和分离的趋势和周期成分
plot_data <- data.frame(t = t, y = y, trend = trend_comp$m[,,1], seasonality = seasonality_comp$m[,,2])
nileBuild <- function(par) {
dlmModPoly(1, dV = exp(par[1]), dW = exp(par[2]))
}
nileMLE <- dlmMLE(Nile, rep(0,2), nileBuild); nileMLE$conv
nileMod <- nileBuild(nileMLE$par)
V(nileMod)
W(nileMod)
nileFilt <- dlmFilter(Nile, nileMod)
nileSmooth <- dlmSmooth(nileFilt)
plot(cbind(Nile, nileFilt$m[-1], nileSmooth$s[-1]), plot.type='s',
col=c("black","red","blue"), ylab="Level", main="Nile river", lwd=c(1,2,2))
？dlmModPoly
?dlmModPoly
nileMLE
nileMLE
?nileBuild
?nileMLE
?dlmMLE
data(NelPlo)
### multivariate local level -- seemingly unrelated time series
buildSu <- function(x) {
Vsd <- exp(x[1:2])
Vcorr <- tanh(x[3])
V <- Vsd %o% Vsd
V[1,2] <- V[2,1] <- V[1,2] * Vcorr
Wsd <- exp(x[4:5])
Wcorr <- tanh(x[6])
W <- Wsd %o% Wsd
W[1,2] <- W[2,1] <- W[1,2] * Wcorr
return(list(
m0 = rep(0,2),
C0 = 1e7 * diag(2),
FF = diag(2),
GG = diag(2),
V = V,
W = W))
}
suMLE <- dlmMLE(NelPlo, rep(0,6), buildSu); suMLE
buildSu(suMLE$par)[c("V","W")]
StructTS(NelPlo[,1], type="level") ## compare with W[1,1] and V[1,1]
StructTS(NelPlo[,2], type="level") ## compare with W[2,2] and V[2,2]
## multivariate local level model with homogeneity restriction
buildHo <- function(x) {
Vsd <- exp(x[1:2])
Vcorr <- tanh(x[3])
V <- Vsd %o% Vsd
V[1,2] <- V[2,1] <- V[1,2] * Vcorr
return(list(
m0 = rep(0,2),
C0 = 1e7 * diag(2),
FF = diag(2),
GG = diag(2),
V = V,
W = x[4]^2 * V))
}
hoMLE <- dlmMLE(NelPlo, rep(0,4), buildHo); hoMLE
buildHo(hoMLE$par)[c("V","W")]
NelPlo
NelPlo
buildSu <- function(x) {
Vsd <- exp(x[1:2])
Vcorr <- tanh(x[3])
V <- Vsd %o% Vsd
V[1,2] <- V[2,1] <- V[1,2] * Vcorr
Wsd <- exp(x[4:5])
Wcorr <- tanh(x[6])
W <- Wsd %o% Wsd
W[1,2] <- W[2,1] <- W[1,2] * Wcorr
return(list(
m0 = rep(0,2),
C0 = 1e7 * diag(2),
FF = diag(2),
GG = diag(2),
V = V,
W = W))
}
suMLE <- dlmMLE(NelPlo, rep(0,6), buildSu); suMLE
buildSu(suMLE$par)[c("V","W")]
??NelPlo
?NelPlo
plot(NelPlo)
buildSu(NelPlo)
suMLE$par
buildSu(suMLE$par)
StructTS(NelPlo[,1], type="level") ## compare with W[1,1] and V[1,1]
StructTS(NelPlo[,2], type="level") ## compare with W[2,2] and V[2,2]
## multivariate local level model with homogeneity restriction
buildHo <- function(x) {
Vsd <- exp(x[1:2])
Vcorr <- tanh(x[3])
V <- Vsd %o% Vsd
V[1,2] <- V[2,1] <- V[1,2] * Vcorr
return(list(
m0 = rep(0,2),
C0 = 1e7 * diag(2),
FF = diag(2),
GG = diag(2),
V = V,
W = x[4]^2 * V))
}
hoMLE <- dlmMLE(NelPlo, rep(0,4), buildHo); hoMLE
buildHo(hoMLE$par)[c("V","W")]
?dlmMLE
### multivariate local level -- seemingly unrelated time series
# 求解最优参数
suMLE <- dlmMLE(NelPlo, rep(0,6), buildSu); suMLE
suMLE
StructTS(NelPlo[,1], type="level") ## compare with W[1,1] and V[1,1]
# 应用最优参数
buildSu(suMLE$par)[c("V","W")]
StructTS(NelPlo[,1], type="level") ## compare with W[1,1] and V[1,1]
NelPlo[,2]
StructTS(NelPlo[,2], type="level") ## compare with W[2,2] and V[2,2]
# 应用最优参数
buildSu(suMLE$par)[c("V","W")]
## multivariate local level model with homogeneity restriction
hoMLE <- dlmMLE(NelPlo, rep(0,4), buildHo); hoMLE
buildHo(hoMLE$par)[c("V","W")]
?dlmFilter
exp(par[1]
)
exp(par[1])
par[1]
nileMLE <- dlmMLE(Nile, rep(0,2), nileBuild); nileMLE$conv
nileMod <- nileBuild(nileMLE$par)
nileMLE$conv
V(nileMod)
W(nileMod)
nileMod
nileFilt <- dlmFilter(Nile, nileMod)
nileFilt
nileSmooth <- dlmSmooth(nileFilt)
plot(cbind(Nile, nileFilt$m[-1], nileSmooth$s[-1]), plot.type='s',
col=c("black","red","blue"), ylab="Level", main="Nile river", lwd=c(1,2,2))
plot(cbind(Nile, nileFilt$m[-1], nileSmooth$s[-1]), plot.type='s',
col=c("black","red","blue"), ylab="Level", main="Nile river", lwd=c(1,2,2))
all( Mod(polyroot(c(1,-ar))) > 1 ) # TRUE
(ar <- ARtransPars(rnorm(5)))
all( Mod(polyroot(c(1,-ar))) > 1 ) # TRUE
rnorm(5)
ARtransPars(rnorm(5))
(ar <- ARtransPars(rnorm(5)))
all( Mod(polyroot(c(1,-ar))) > 1 ) # TRUE
Mod(polyroot(c(1,-ar))) > 1
polyroot(c(1,-ar))
Mod(polyroot(c(1,-ar)))
?dlmModARMA
# dlmModARMA Create a DLM representation of an ARMA process
## ARMA(2,3)
dlmModARMA(ar = c(.5,.1), ma = c(.4,2,.3), sigma2=1)
## Bivariate ARMA(2,1)
dlmModARMA(ar = list(matrix(1:4,2,2), matrix(101:104,2,2)),
ma = list(matrix(-4:-1,2,2)), sigma2 = diag(2))
nileMLE <- dlmMLE(Nile, rep(0,2), dlmModARMA)
nileFilt <- dlmMLE(Nile, rep(0,2), dlmModARMA); nileFilt$conv
nileMod <- dlmModARMA(nileFilt$par)
nileFilt <- dlmFilter(Nile, nileMod)
nileSmooth <- dlmSmooth(nileFilt)
plot(cbind(Nile, nileFilt$m[-1], nileSmooth$s[-1]), plot.type='s',
col=c("black","red","blue"), ylab="Level", main="Nile river", lwd=c(1,2,2))
nileFilt$m[-1]
nileSmooth$s[-1]
Nile
?dlmModPoly
## 1. dlmModReg Create a DLM representation of a regression model
# The function creates a dlm representation of a linear regression model.
x <- matrix(runif(6,4,10), nc = 2); x
dlmModReg(x)
?dlm
data(NelPlo)
plot(NelPlo)
suMLE <- dlmMLE(NelPlo, rep(0,6), buildSu); suMLE
suMLE <- dlmMLE(NelPlo, rep(0,6), buildSu); suMLE
# 应用最优参数
buildSu(suMLE$par)[c("V","W")]
StructTS(NelPlo[,1], type="level") ## compare with W[1,1] and V[1,1]
W[1,1]
StructTS(NelPlo[,2], type="level") ## compare with W[2,2] and V[2,2]
data(NelPlo)
plot(NelPlo)
my_mod <-  dlmModReg() + dlmModSeas(11)
?dlmModReg
## my test mod
x <- matrix(runif(6,4,10), nc = 2); x
my_mod <-  dlmModReg(x) + dlmModSeas(11)
suMLE <- dlmMLE(NelPlo, rep(0,6), my_mod); suMLE
my_mod <-  dlmModReg(x) + dlmModSeas(11)
suMLE <- dlmMLE(NelPlo, rep(0,6), my_mod); suMLE
suMLE <- dlmMLE(NelPlo, rep(0,6), dlmModARMA); suMLE
buildSu(suMLE$par)[c("V","W")]
citation(dlm)
citation("dlm")
